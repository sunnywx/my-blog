{"url":"/blog/2020-10/styled-components-add-media-query","date":"2020-10-14","tags":["css"],"content":"\nMedia query 在`styled-components`下的使用，和普通 css 下是一样的，只是 styled-components 支持 SCSS 的语法\n，另外可以在 es6 的模板字符串(tagged template)下有独特的写法。\n\n![](/assets/images/styled-comp-scss.jpeg)\n\n## 传统的写法\n\n```\n#wrapper {\n  display: flex;\n  flex-direction: row;\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n}\n\n```\n\n## styled-components 下的写法\n\n```js\nimport styled from \"styled-components\"\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`\n```\n\n## styled-component 下的 scss 写法\n\n```js\nconst Article = styled.div`\n  > h3 {\n    margin-bottom: 1rem;\n    > a {\n      text-decoration: none;\n    }\n  }\n  \n  .snapshots{\n    display: flex;\n    \n    > img {\n      @media (min-width: 1024px} {\n        width: 30%;        \n      }\n    }\n  }\n`\n```\n\n`styled.div` 后面接的是 模板字符串，可以插值(interpolate)，所以可以把不同分辨率的配置抽出来：\n\n```js\n// config/device-size.js\n\nexport const size = {\n  mobile: \"425px\",\n  tablet: \"768px\",\n  desktop: \"1024px\",\n}\n\nexport const device = {\n  mobile: `(max-width: ${size.mobile})`,\n  tablet: `(min-width: ${size.tablet}) and (max-width: ${size.desktop})`,\n  desktop: `(min-width: ${size.desktop})`,\n}\n```\n\n最终的 styled-components media query 写法\n\n```js\nconst Article = styled(Card)`\n  > h3 {\n    margin-bottom: 1rem;\n    > a {\n      text-decoration: none;\n    }\n  }\n\n  .snapshots {\n    display: flex;\n\n    > img {\n      @media ${device.desktop} {\n        width: 30%;\n      }\n    }\n  }\n`\n```\n"}